// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/types/consensus.proto
// Protobuf Java Version: 4.29.1

package com.github.iotexproject.grpc.types;

/**
 * Protobuf type {@code iotextypes.ConsensusMessage}
 */
public final class ConsensusMessage extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:iotextypes.ConsensusMessage)
    ConsensusMessageOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 1,
      /* suffix= */ "",
      ConsensusMessage.class.getName());
  }
  // Use ConsensusMessage.newBuilder() to construct.
  private ConsensusMessage(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private ConsensusMessage() {
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.iotexproject.grpc.types.Consensus.internal_static_iotextypes_ConsensusMessage_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.iotexproject.grpc.types.Consensus.internal_static_iotextypes_ConsensusMessage_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.iotexproject.grpc.types.ConsensusMessage.class, com.github.iotexproject.grpc.types.ConsensusMessage.Builder.class);
  }

  private int bitField0_;
  private int msgCase_ = 0;
  @SuppressWarnings("serial")
  private java.lang.Object msg_;
  public enum MsgCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    BLOCKPROPOSAL(100),
    VOTE(101),
    MSG_NOT_SET(0);
    private final int value;
    private MsgCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MsgCase valueOf(int value) {
      return forNumber(value);
    }

    public static MsgCase forNumber(int value) {
      switch (value) {
        case 100: return BLOCKPROPOSAL;
        case 101: return VOTE;
        case 0: return MSG_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public MsgCase
  getMsgCase() {
    return MsgCase.forNumber(
        msgCase_);
  }

  public static final int HEIGHT_FIELD_NUMBER = 1;
  private long height_ = 0L;
  /**
   * <code>uint64 height = 1;</code>
   * @return The height.
   */
  @java.lang.Override
  public long getHeight() {
    return height_;
  }

  public static final int ENDORSEMENT_FIELD_NUMBER = 2;
  private com.github.iotexproject.grpc.types.Endorsement endorsement_;
  /**
   * <code>.iotextypes.Endorsement endorsement = 2;</code>
   * @return Whether the endorsement field is set.
   */
  @java.lang.Override
  public boolean hasEndorsement() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.iotextypes.Endorsement endorsement = 2;</code>
   * @return The endorsement.
   */
  @java.lang.Override
  public com.github.iotexproject.grpc.types.Endorsement getEndorsement() {
    return endorsement_ == null ? com.github.iotexproject.grpc.types.Endorsement.getDefaultInstance() : endorsement_;
  }
  /**
   * <code>.iotextypes.Endorsement endorsement = 2;</code>
   */
  @java.lang.Override
  public com.github.iotexproject.grpc.types.EndorsementOrBuilder getEndorsementOrBuilder() {
    return endorsement_ == null ? com.github.iotexproject.grpc.types.Endorsement.getDefaultInstance() : endorsement_;
  }

  public static final int BLOCKPROPOSAL_FIELD_NUMBER = 100;
  /**
   * <code>.iotextypes.BlockProposal blockProposal = 100;</code>
   * @return Whether the blockProposal field is set.
   */
  @java.lang.Override
  public boolean hasBlockProposal() {
    return msgCase_ == 100;
  }
  /**
   * <code>.iotextypes.BlockProposal blockProposal = 100;</code>
   * @return The blockProposal.
   */
  @java.lang.Override
  public com.github.iotexproject.grpc.types.BlockProposal getBlockProposal() {
    if (msgCase_ == 100) {
       return (com.github.iotexproject.grpc.types.BlockProposal) msg_;
    }
    return com.github.iotexproject.grpc.types.BlockProposal.getDefaultInstance();
  }
  /**
   * <code>.iotextypes.BlockProposal blockProposal = 100;</code>
   */
  @java.lang.Override
  public com.github.iotexproject.grpc.types.BlockProposalOrBuilder getBlockProposalOrBuilder() {
    if (msgCase_ == 100) {
       return (com.github.iotexproject.grpc.types.BlockProposal) msg_;
    }
    return com.github.iotexproject.grpc.types.BlockProposal.getDefaultInstance();
  }

  public static final int VOTE_FIELD_NUMBER = 101;
  /**
   * <code>.iotextypes.ConsensusVote vote = 101;</code>
   * @return Whether the vote field is set.
   */
  @java.lang.Override
  public boolean hasVote() {
    return msgCase_ == 101;
  }
  /**
   * <code>.iotextypes.ConsensusVote vote = 101;</code>
   * @return The vote.
   */
  @java.lang.Override
  public com.github.iotexproject.grpc.types.ConsensusVote getVote() {
    if (msgCase_ == 101) {
       return (com.github.iotexproject.grpc.types.ConsensusVote) msg_;
    }
    return com.github.iotexproject.grpc.types.ConsensusVote.getDefaultInstance();
  }
  /**
   * <code>.iotextypes.ConsensusVote vote = 101;</code>
   */
  @java.lang.Override
  public com.github.iotexproject.grpc.types.ConsensusVoteOrBuilder getVoteOrBuilder() {
    if (msgCase_ == 101) {
       return (com.github.iotexproject.grpc.types.ConsensusVote) msg_;
    }
    return com.github.iotexproject.grpc.types.ConsensusVote.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (height_ != 0L) {
      output.writeUInt64(1, height_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(2, getEndorsement());
    }
    if (msgCase_ == 100) {
      output.writeMessage(100, (com.github.iotexproject.grpc.types.BlockProposal) msg_);
    }
    if (msgCase_ == 101) {
      output.writeMessage(101, (com.github.iotexproject.grpc.types.ConsensusVote) msg_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (height_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(1, height_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getEndorsement());
    }
    if (msgCase_ == 100) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(100, (com.github.iotexproject.grpc.types.BlockProposal) msg_);
    }
    if (msgCase_ == 101) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(101, (com.github.iotexproject.grpc.types.ConsensusVote) msg_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.github.iotexproject.grpc.types.ConsensusMessage)) {
      return super.equals(obj);
    }
    com.github.iotexproject.grpc.types.ConsensusMessage other = (com.github.iotexproject.grpc.types.ConsensusMessage) obj;

    if (getHeight()
        != other.getHeight()) return false;
    if (hasEndorsement() != other.hasEndorsement()) return false;
    if (hasEndorsement()) {
      if (!getEndorsement()
          .equals(other.getEndorsement())) return false;
    }
    if (!getMsgCase().equals(other.getMsgCase())) return false;
    switch (msgCase_) {
      case 100:
        if (!getBlockProposal()
            .equals(other.getBlockProposal())) return false;
        break;
      case 101:
        if (!getVote()
            .equals(other.getVote())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + HEIGHT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getHeight());
    if (hasEndorsement()) {
      hash = (37 * hash) + ENDORSEMENT_FIELD_NUMBER;
      hash = (53 * hash) + getEndorsement().hashCode();
    }
    switch (msgCase_) {
      case 100:
        hash = (37 * hash) + BLOCKPROPOSAL_FIELD_NUMBER;
        hash = (53 * hash) + getBlockProposal().hashCode();
        break;
      case 101:
        hash = (37 * hash) + VOTE_FIELD_NUMBER;
        hash = (53 * hash) + getVote().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.github.iotexproject.grpc.types.ConsensusMessage parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.iotexproject.grpc.types.ConsensusMessage parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.iotexproject.grpc.types.ConsensusMessage parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.iotexproject.grpc.types.ConsensusMessage parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.iotexproject.grpc.types.ConsensusMessage parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.iotexproject.grpc.types.ConsensusMessage parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.iotexproject.grpc.types.ConsensusMessage parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.github.iotexproject.grpc.types.ConsensusMessage parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.github.iotexproject.grpc.types.ConsensusMessage parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.github.iotexproject.grpc.types.ConsensusMessage parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.iotexproject.grpc.types.ConsensusMessage parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.github.iotexproject.grpc.types.ConsensusMessage parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.iotexproject.grpc.types.ConsensusMessage prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code iotextypes.ConsensusMessage}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:iotextypes.ConsensusMessage)
      com.github.iotexproject.grpc.types.ConsensusMessageOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.iotexproject.grpc.types.Consensus.internal_static_iotextypes_ConsensusMessage_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.iotexproject.grpc.types.Consensus.internal_static_iotextypes_ConsensusMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.iotexproject.grpc.types.ConsensusMessage.class, com.github.iotexproject.grpc.types.ConsensusMessage.Builder.class);
    }

    // Construct using com.github.iotexproject.grpc.types.ConsensusMessage.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getEndorsementFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      height_ = 0L;
      endorsement_ = null;
      if (endorsementBuilder_ != null) {
        endorsementBuilder_.dispose();
        endorsementBuilder_ = null;
      }
      if (blockProposalBuilder_ != null) {
        blockProposalBuilder_.clear();
      }
      if (voteBuilder_ != null) {
        voteBuilder_.clear();
      }
      msgCase_ = 0;
      msg_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.iotexproject.grpc.types.Consensus.internal_static_iotextypes_ConsensusMessage_descriptor;
    }

    @java.lang.Override
    public com.github.iotexproject.grpc.types.ConsensusMessage getDefaultInstanceForType() {
      return com.github.iotexproject.grpc.types.ConsensusMessage.getDefaultInstance();
    }

    @java.lang.Override
    public com.github.iotexproject.grpc.types.ConsensusMessage build() {
      com.github.iotexproject.grpc.types.ConsensusMessage result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.github.iotexproject.grpc.types.ConsensusMessage buildPartial() {
      com.github.iotexproject.grpc.types.ConsensusMessage result = new com.github.iotexproject.grpc.types.ConsensusMessage(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(com.github.iotexproject.grpc.types.ConsensusMessage result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.height_ = height_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.endorsement_ = endorsementBuilder_ == null
            ? endorsement_
            : endorsementBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ |= to_bitField0_;
    }

    private void buildPartialOneofs(com.github.iotexproject.grpc.types.ConsensusMessage result) {
      result.msgCase_ = msgCase_;
      result.msg_ = this.msg_;
      if (msgCase_ == 100 &&
          blockProposalBuilder_ != null) {
        result.msg_ = blockProposalBuilder_.build();
      }
      if (msgCase_ == 101 &&
          voteBuilder_ != null) {
        result.msg_ = voteBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.iotexproject.grpc.types.ConsensusMessage) {
        return mergeFrom((com.github.iotexproject.grpc.types.ConsensusMessage)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.iotexproject.grpc.types.ConsensusMessage other) {
      if (other == com.github.iotexproject.grpc.types.ConsensusMessage.getDefaultInstance()) return this;
      if (other.getHeight() != 0L) {
        setHeight(other.getHeight());
      }
      if (other.hasEndorsement()) {
        mergeEndorsement(other.getEndorsement());
      }
      switch (other.getMsgCase()) {
        case BLOCKPROPOSAL: {
          mergeBlockProposal(other.getBlockProposal());
          break;
        }
        case VOTE: {
          mergeVote(other.getVote());
          break;
        }
        case MSG_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              height_ = input.readUInt64();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 18: {
              input.readMessage(
                  getEndorsementFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 802: {
              input.readMessage(
                  getBlockProposalFieldBuilder().getBuilder(),
                  extensionRegistry);
              msgCase_ = 100;
              break;
            } // case 802
            case 810: {
              input.readMessage(
                  getVoteFieldBuilder().getBuilder(),
                  extensionRegistry);
              msgCase_ = 101;
              break;
            } // case 810
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int msgCase_ = 0;
    private java.lang.Object msg_;
    public MsgCase
        getMsgCase() {
      return MsgCase.forNumber(
          msgCase_);
    }

    public Builder clearMsg() {
      msgCase_ = 0;
      msg_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private long height_ ;
    /**
     * <code>uint64 height = 1;</code>
     * @return The height.
     */
    @java.lang.Override
    public long getHeight() {
      return height_;
    }
    /**
     * <code>uint64 height = 1;</code>
     * @param value The height to set.
     * @return This builder for chaining.
     */
    public Builder setHeight(long value) {

      height_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>uint64 height = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearHeight() {
      bitField0_ = (bitField0_ & ~0x00000001);
      height_ = 0L;
      onChanged();
      return this;
    }

    private com.github.iotexproject.grpc.types.Endorsement endorsement_;
    private com.google.protobuf.SingleFieldBuilder<
        com.github.iotexproject.grpc.types.Endorsement, com.github.iotexproject.grpc.types.Endorsement.Builder, com.github.iotexproject.grpc.types.EndorsementOrBuilder> endorsementBuilder_;
    /**
     * <code>.iotextypes.Endorsement endorsement = 2;</code>
     * @return Whether the endorsement field is set.
     */
    public boolean hasEndorsement() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.iotextypes.Endorsement endorsement = 2;</code>
     * @return The endorsement.
     */
    public com.github.iotexproject.grpc.types.Endorsement getEndorsement() {
      if (endorsementBuilder_ == null) {
        return endorsement_ == null ? com.github.iotexproject.grpc.types.Endorsement.getDefaultInstance() : endorsement_;
      } else {
        return endorsementBuilder_.getMessage();
      }
    }
    /**
     * <code>.iotextypes.Endorsement endorsement = 2;</code>
     */
    public Builder setEndorsement(com.github.iotexproject.grpc.types.Endorsement value) {
      if (endorsementBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        endorsement_ = value;
      } else {
        endorsementBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>.iotextypes.Endorsement endorsement = 2;</code>
     */
    public Builder setEndorsement(
        com.github.iotexproject.grpc.types.Endorsement.Builder builderForValue) {
      if (endorsementBuilder_ == null) {
        endorsement_ = builderForValue.build();
      } else {
        endorsementBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>.iotextypes.Endorsement endorsement = 2;</code>
     */
    public Builder mergeEndorsement(com.github.iotexproject.grpc.types.Endorsement value) {
      if (endorsementBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          endorsement_ != null &&
          endorsement_ != com.github.iotexproject.grpc.types.Endorsement.getDefaultInstance()) {
          getEndorsementBuilder().mergeFrom(value);
        } else {
          endorsement_ = value;
        }
      } else {
        endorsementBuilder_.mergeFrom(value);
      }
      if (endorsement_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     * <code>.iotextypes.Endorsement endorsement = 2;</code>
     */
    public Builder clearEndorsement() {
      bitField0_ = (bitField0_ & ~0x00000002);
      endorsement_ = null;
      if (endorsementBuilder_ != null) {
        endorsementBuilder_.dispose();
        endorsementBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.iotextypes.Endorsement endorsement = 2;</code>
     */
    public com.github.iotexproject.grpc.types.Endorsement.Builder getEndorsementBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getEndorsementFieldBuilder().getBuilder();
    }
    /**
     * <code>.iotextypes.Endorsement endorsement = 2;</code>
     */
    public com.github.iotexproject.grpc.types.EndorsementOrBuilder getEndorsementOrBuilder() {
      if (endorsementBuilder_ != null) {
        return endorsementBuilder_.getMessageOrBuilder();
      } else {
        return endorsement_ == null ?
            com.github.iotexproject.grpc.types.Endorsement.getDefaultInstance() : endorsement_;
      }
    }
    /**
     * <code>.iotextypes.Endorsement endorsement = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.github.iotexproject.grpc.types.Endorsement, com.github.iotexproject.grpc.types.Endorsement.Builder, com.github.iotexproject.grpc.types.EndorsementOrBuilder> 
        getEndorsementFieldBuilder() {
      if (endorsementBuilder_ == null) {
        endorsementBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.github.iotexproject.grpc.types.Endorsement, com.github.iotexproject.grpc.types.Endorsement.Builder, com.github.iotexproject.grpc.types.EndorsementOrBuilder>(
                getEndorsement(),
                getParentForChildren(),
                isClean());
        endorsement_ = null;
      }
      return endorsementBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.github.iotexproject.grpc.types.BlockProposal, com.github.iotexproject.grpc.types.BlockProposal.Builder, com.github.iotexproject.grpc.types.BlockProposalOrBuilder> blockProposalBuilder_;
    /**
     * <code>.iotextypes.BlockProposal blockProposal = 100;</code>
     * @return Whether the blockProposal field is set.
     */
    @java.lang.Override
    public boolean hasBlockProposal() {
      return msgCase_ == 100;
    }
    /**
     * <code>.iotextypes.BlockProposal blockProposal = 100;</code>
     * @return The blockProposal.
     */
    @java.lang.Override
    public com.github.iotexproject.grpc.types.BlockProposal getBlockProposal() {
      if (blockProposalBuilder_ == null) {
        if (msgCase_ == 100) {
          return (com.github.iotexproject.grpc.types.BlockProposal) msg_;
        }
        return com.github.iotexproject.grpc.types.BlockProposal.getDefaultInstance();
      } else {
        if (msgCase_ == 100) {
          return blockProposalBuilder_.getMessage();
        }
        return com.github.iotexproject.grpc.types.BlockProposal.getDefaultInstance();
      }
    }
    /**
     * <code>.iotextypes.BlockProposal blockProposal = 100;</code>
     */
    public Builder setBlockProposal(com.github.iotexproject.grpc.types.BlockProposal value) {
      if (blockProposalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        msg_ = value;
        onChanged();
      } else {
        blockProposalBuilder_.setMessage(value);
      }
      msgCase_ = 100;
      return this;
    }
    /**
     * <code>.iotextypes.BlockProposal blockProposal = 100;</code>
     */
    public Builder setBlockProposal(
        com.github.iotexproject.grpc.types.BlockProposal.Builder builderForValue) {
      if (blockProposalBuilder_ == null) {
        msg_ = builderForValue.build();
        onChanged();
      } else {
        blockProposalBuilder_.setMessage(builderForValue.build());
      }
      msgCase_ = 100;
      return this;
    }
    /**
     * <code>.iotextypes.BlockProposal blockProposal = 100;</code>
     */
    public Builder mergeBlockProposal(com.github.iotexproject.grpc.types.BlockProposal value) {
      if (blockProposalBuilder_ == null) {
        if (msgCase_ == 100 &&
            msg_ != com.github.iotexproject.grpc.types.BlockProposal.getDefaultInstance()) {
          msg_ = com.github.iotexproject.grpc.types.BlockProposal.newBuilder((com.github.iotexproject.grpc.types.BlockProposal) msg_)
              .mergeFrom(value).buildPartial();
        } else {
          msg_ = value;
        }
        onChanged();
      } else {
        if (msgCase_ == 100) {
          blockProposalBuilder_.mergeFrom(value);
        } else {
          blockProposalBuilder_.setMessage(value);
        }
      }
      msgCase_ = 100;
      return this;
    }
    /**
     * <code>.iotextypes.BlockProposal blockProposal = 100;</code>
     */
    public Builder clearBlockProposal() {
      if (blockProposalBuilder_ == null) {
        if (msgCase_ == 100) {
          msgCase_ = 0;
          msg_ = null;
          onChanged();
        }
      } else {
        if (msgCase_ == 100) {
          msgCase_ = 0;
          msg_ = null;
        }
        blockProposalBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.iotextypes.BlockProposal blockProposal = 100;</code>
     */
    public com.github.iotexproject.grpc.types.BlockProposal.Builder getBlockProposalBuilder() {
      return getBlockProposalFieldBuilder().getBuilder();
    }
    /**
     * <code>.iotextypes.BlockProposal blockProposal = 100;</code>
     */
    @java.lang.Override
    public com.github.iotexproject.grpc.types.BlockProposalOrBuilder getBlockProposalOrBuilder() {
      if ((msgCase_ == 100) && (blockProposalBuilder_ != null)) {
        return blockProposalBuilder_.getMessageOrBuilder();
      } else {
        if (msgCase_ == 100) {
          return (com.github.iotexproject.grpc.types.BlockProposal) msg_;
        }
        return com.github.iotexproject.grpc.types.BlockProposal.getDefaultInstance();
      }
    }
    /**
     * <code>.iotextypes.BlockProposal blockProposal = 100;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.github.iotexproject.grpc.types.BlockProposal, com.github.iotexproject.grpc.types.BlockProposal.Builder, com.github.iotexproject.grpc.types.BlockProposalOrBuilder> 
        getBlockProposalFieldBuilder() {
      if (blockProposalBuilder_ == null) {
        if (!(msgCase_ == 100)) {
          msg_ = com.github.iotexproject.grpc.types.BlockProposal.getDefaultInstance();
        }
        blockProposalBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.github.iotexproject.grpc.types.BlockProposal, com.github.iotexproject.grpc.types.BlockProposal.Builder, com.github.iotexproject.grpc.types.BlockProposalOrBuilder>(
                (com.github.iotexproject.grpc.types.BlockProposal) msg_,
                getParentForChildren(),
                isClean());
        msg_ = null;
      }
      msgCase_ = 100;
      onChanged();
      return blockProposalBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        com.github.iotexproject.grpc.types.ConsensusVote, com.github.iotexproject.grpc.types.ConsensusVote.Builder, com.github.iotexproject.grpc.types.ConsensusVoteOrBuilder> voteBuilder_;
    /**
     * <code>.iotextypes.ConsensusVote vote = 101;</code>
     * @return Whether the vote field is set.
     */
    @java.lang.Override
    public boolean hasVote() {
      return msgCase_ == 101;
    }
    /**
     * <code>.iotextypes.ConsensusVote vote = 101;</code>
     * @return The vote.
     */
    @java.lang.Override
    public com.github.iotexproject.grpc.types.ConsensusVote getVote() {
      if (voteBuilder_ == null) {
        if (msgCase_ == 101) {
          return (com.github.iotexproject.grpc.types.ConsensusVote) msg_;
        }
        return com.github.iotexproject.grpc.types.ConsensusVote.getDefaultInstance();
      } else {
        if (msgCase_ == 101) {
          return voteBuilder_.getMessage();
        }
        return com.github.iotexproject.grpc.types.ConsensusVote.getDefaultInstance();
      }
    }
    /**
     * <code>.iotextypes.ConsensusVote vote = 101;</code>
     */
    public Builder setVote(com.github.iotexproject.grpc.types.ConsensusVote value) {
      if (voteBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        msg_ = value;
        onChanged();
      } else {
        voteBuilder_.setMessage(value);
      }
      msgCase_ = 101;
      return this;
    }
    /**
     * <code>.iotextypes.ConsensusVote vote = 101;</code>
     */
    public Builder setVote(
        com.github.iotexproject.grpc.types.ConsensusVote.Builder builderForValue) {
      if (voteBuilder_ == null) {
        msg_ = builderForValue.build();
        onChanged();
      } else {
        voteBuilder_.setMessage(builderForValue.build());
      }
      msgCase_ = 101;
      return this;
    }
    /**
     * <code>.iotextypes.ConsensusVote vote = 101;</code>
     */
    public Builder mergeVote(com.github.iotexproject.grpc.types.ConsensusVote value) {
      if (voteBuilder_ == null) {
        if (msgCase_ == 101 &&
            msg_ != com.github.iotexproject.grpc.types.ConsensusVote.getDefaultInstance()) {
          msg_ = com.github.iotexproject.grpc.types.ConsensusVote.newBuilder((com.github.iotexproject.grpc.types.ConsensusVote) msg_)
              .mergeFrom(value).buildPartial();
        } else {
          msg_ = value;
        }
        onChanged();
      } else {
        if (msgCase_ == 101) {
          voteBuilder_.mergeFrom(value);
        } else {
          voteBuilder_.setMessage(value);
        }
      }
      msgCase_ = 101;
      return this;
    }
    /**
     * <code>.iotextypes.ConsensusVote vote = 101;</code>
     */
    public Builder clearVote() {
      if (voteBuilder_ == null) {
        if (msgCase_ == 101) {
          msgCase_ = 0;
          msg_ = null;
          onChanged();
        }
      } else {
        if (msgCase_ == 101) {
          msgCase_ = 0;
          msg_ = null;
        }
        voteBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.iotextypes.ConsensusVote vote = 101;</code>
     */
    public com.github.iotexproject.grpc.types.ConsensusVote.Builder getVoteBuilder() {
      return getVoteFieldBuilder().getBuilder();
    }
    /**
     * <code>.iotextypes.ConsensusVote vote = 101;</code>
     */
    @java.lang.Override
    public com.github.iotexproject.grpc.types.ConsensusVoteOrBuilder getVoteOrBuilder() {
      if ((msgCase_ == 101) && (voteBuilder_ != null)) {
        return voteBuilder_.getMessageOrBuilder();
      } else {
        if (msgCase_ == 101) {
          return (com.github.iotexproject.grpc.types.ConsensusVote) msg_;
        }
        return com.github.iotexproject.grpc.types.ConsensusVote.getDefaultInstance();
      }
    }
    /**
     * <code>.iotextypes.ConsensusVote vote = 101;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.github.iotexproject.grpc.types.ConsensusVote, com.github.iotexproject.grpc.types.ConsensusVote.Builder, com.github.iotexproject.grpc.types.ConsensusVoteOrBuilder> 
        getVoteFieldBuilder() {
      if (voteBuilder_ == null) {
        if (!(msgCase_ == 101)) {
          msg_ = com.github.iotexproject.grpc.types.ConsensusVote.getDefaultInstance();
        }
        voteBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.github.iotexproject.grpc.types.ConsensusVote, com.github.iotexproject.grpc.types.ConsensusVote.Builder, com.github.iotexproject.grpc.types.ConsensusVoteOrBuilder>(
                (com.github.iotexproject.grpc.types.ConsensusVote) msg_,
                getParentForChildren(),
                isClean());
        msg_ = null;
      }
      msgCase_ = 101;
      onChanged();
      return voteBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:iotextypes.ConsensusMessage)
  }

  // @@protoc_insertion_point(class_scope:iotextypes.ConsensusMessage)
  private static final com.github.iotexproject.grpc.types.ConsensusMessage DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.iotexproject.grpc.types.ConsensusMessage();
  }

  public static com.github.iotexproject.grpc.types.ConsensusMessage getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ConsensusMessage>
      PARSER = new com.google.protobuf.AbstractParser<ConsensusMessage>() {
    @java.lang.Override
    public ConsensusMessage parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ConsensusMessage> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ConsensusMessage> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.github.iotexproject.grpc.types.ConsensusMessage getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

