// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/types/blockchain.proto

package com.github.iotexproject.grpc.types;

/**
 * <pre>
 * block consists of header followed by transactions
 * hash of current block can be computed from header hence not stored
 * </pre>
 *
 * Protobuf type {@code iotextypes.Block}
 */
public final class Block extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:iotextypes.Block)
    BlockOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Block.newBuilder() to construct.
  private Block(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Block() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Block();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Block(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.github.iotexproject.grpc.types.BlockHeader.Builder subBuilder = null;
            if (header_ != null) {
              subBuilder = header_.toBuilder();
            }
            header_ = input.readMessage(com.github.iotexproject.grpc.types.BlockHeader.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(header_);
              header_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.github.iotexproject.grpc.types.BlockBody.Builder subBuilder = null;
            if (body_ != null) {
              subBuilder = body_.toBuilder();
            }
            body_ = input.readMessage(com.github.iotexproject.grpc.types.BlockBody.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(body_);
              body_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            com.github.iotexproject.grpc.types.BlockFooter.Builder subBuilder = null;
            if (footer_ != null) {
              subBuilder = footer_.toBuilder();
            }
            footer_ = input.readMessage(com.github.iotexproject.grpc.types.BlockFooter.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(footer_);
              footer_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.iotexproject.grpc.types.Blockchain.internal_static_iotextypes_Block_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.iotexproject.grpc.types.Blockchain.internal_static_iotextypes_Block_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.iotexproject.grpc.types.Block.class, com.github.iotexproject.grpc.types.Block.Builder.class);
  }

  public static final int HEADER_FIELD_NUMBER = 1;
  private com.github.iotexproject.grpc.types.BlockHeader header_;
  /**
   * <code>.iotextypes.BlockHeader header = 1;</code>
   * @return Whether the header field is set.
   */
  @java.lang.Override
  public boolean hasHeader() {
    return header_ != null;
  }
  /**
   * <code>.iotextypes.BlockHeader header = 1;</code>
   * @return The header.
   */
  @java.lang.Override
  public com.github.iotexproject.grpc.types.BlockHeader getHeader() {
    return header_ == null ? com.github.iotexproject.grpc.types.BlockHeader.getDefaultInstance() : header_;
  }
  /**
   * <code>.iotextypes.BlockHeader header = 1;</code>
   */
  @java.lang.Override
  public com.github.iotexproject.grpc.types.BlockHeaderOrBuilder getHeaderOrBuilder() {
    return getHeader();
  }

  public static final int BODY_FIELD_NUMBER = 2;
  private com.github.iotexproject.grpc.types.BlockBody body_;
  /**
   * <code>.iotextypes.BlockBody body = 2;</code>
   * @return Whether the body field is set.
   */
  @java.lang.Override
  public boolean hasBody() {
    return body_ != null;
  }
  /**
   * <code>.iotextypes.BlockBody body = 2;</code>
   * @return The body.
   */
  @java.lang.Override
  public com.github.iotexproject.grpc.types.BlockBody getBody() {
    return body_ == null ? com.github.iotexproject.grpc.types.BlockBody.getDefaultInstance() : body_;
  }
  /**
   * <code>.iotextypes.BlockBody body = 2;</code>
   */
  @java.lang.Override
  public com.github.iotexproject.grpc.types.BlockBodyOrBuilder getBodyOrBuilder() {
    return getBody();
  }

  public static final int FOOTER_FIELD_NUMBER = 3;
  private com.github.iotexproject.grpc.types.BlockFooter footer_;
  /**
   * <code>.iotextypes.BlockFooter footer = 3;</code>
   * @return Whether the footer field is set.
   */
  @java.lang.Override
  public boolean hasFooter() {
    return footer_ != null;
  }
  /**
   * <code>.iotextypes.BlockFooter footer = 3;</code>
   * @return The footer.
   */
  @java.lang.Override
  public com.github.iotexproject.grpc.types.BlockFooter getFooter() {
    return footer_ == null ? com.github.iotexproject.grpc.types.BlockFooter.getDefaultInstance() : footer_;
  }
  /**
   * <code>.iotextypes.BlockFooter footer = 3;</code>
   */
  @java.lang.Override
  public com.github.iotexproject.grpc.types.BlockFooterOrBuilder getFooterOrBuilder() {
    return getFooter();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (header_ != null) {
      output.writeMessage(1, getHeader());
    }
    if (body_ != null) {
      output.writeMessage(2, getBody());
    }
    if (footer_ != null) {
      output.writeMessage(3, getFooter());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (header_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getHeader());
    }
    if (body_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getBody());
    }
    if (footer_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getFooter());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.github.iotexproject.grpc.types.Block)) {
      return super.equals(obj);
    }
    com.github.iotexproject.grpc.types.Block other = (com.github.iotexproject.grpc.types.Block) obj;

    if (hasHeader() != other.hasHeader()) return false;
    if (hasHeader()) {
      if (!getHeader()
          .equals(other.getHeader())) return false;
    }
    if (hasBody() != other.hasBody()) return false;
    if (hasBody()) {
      if (!getBody()
          .equals(other.getBody())) return false;
    }
    if (hasFooter() != other.hasFooter()) return false;
    if (hasFooter()) {
      if (!getFooter()
          .equals(other.getFooter())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasHeader()) {
      hash = (37 * hash) + HEADER_FIELD_NUMBER;
      hash = (53 * hash) + getHeader().hashCode();
    }
    if (hasBody()) {
      hash = (37 * hash) + BODY_FIELD_NUMBER;
      hash = (53 * hash) + getBody().hashCode();
    }
    if (hasFooter()) {
      hash = (37 * hash) + FOOTER_FIELD_NUMBER;
      hash = (53 * hash) + getFooter().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.github.iotexproject.grpc.types.Block parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.iotexproject.grpc.types.Block parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.iotexproject.grpc.types.Block parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.iotexproject.grpc.types.Block parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.iotexproject.grpc.types.Block parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.iotexproject.grpc.types.Block parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.iotexproject.grpc.types.Block parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.iotexproject.grpc.types.Block parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.iotexproject.grpc.types.Block parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.github.iotexproject.grpc.types.Block parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.iotexproject.grpc.types.Block parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.iotexproject.grpc.types.Block parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.iotexproject.grpc.types.Block prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * block consists of header followed by transactions
   * hash of current block can be computed from header hence not stored
   * </pre>
   *
   * Protobuf type {@code iotextypes.Block}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:iotextypes.Block)
      com.github.iotexproject.grpc.types.BlockOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.iotexproject.grpc.types.Blockchain.internal_static_iotextypes_Block_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.iotexproject.grpc.types.Blockchain.internal_static_iotextypes_Block_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.iotexproject.grpc.types.Block.class, com.github.iotexproject.grpc.types.Block.Builder.class);
    }

    // Construct using com.github.iotexproject.grpc.types.Block.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (headerBuilder_ == null) {
        header_ = null;
      } else {
        header_ = null;
        headerBuilder_ = null;
      }
      if (bodyBuilder_ == null) {
        body_ = null;
      } else {
        body_ = null;
        bodyBuilder_ = null;
      }
      if (footerBuilder_ == null) {
        footer_ = null;
      } else {
        footer_ = null;
        footerBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.iotexproject.grpc.types.Blockchain.internal_static_iotextypes_Block_descriptor;
    }

    @java.lang.Override
    public com.github.iotexproject.grpc.types.Block getDefaultInstanceForType() {
      return com.github.iotexproject.grpc.types.Block.getDefaultInstance();
    }

    @java.lang.Override
    public com.github.iotexproject.grpc.types.Block build() {
      com.github.iotexproject.grpc.types.Block result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.github.iotexproject.grpc.types.Block buildPartial() {
      com.github.iotexproject.grpc.types.Block result = new com.github.iotexproject.grpc.types.Block(this);
      if (headerBuilder_ == null) {
        result.header_ = header_;
      } else {
        result.header_ = headerBuilder_.build();
      }
      if (bodyBuilder_ == null) {
        result.body_ = body_;
      } else {
        result.body_ = bodyBuilder_.build();
      }
      if (footerBuilder_ == null) {
        result.footer_ = footer_;
      } else {
        result.footer_ = footerBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.iotexproject.grpc.types.Block) {
        return mergeFrom((com.github.iotexproject.grpc.types.Block)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.iotexproject.grpc.types.Block other) {
      if (other == com.github.iotexproject.grpc.types.Block.getDefaultInstance()) return this;
      if (other.hasHeader()) {
        mergeHeader(other.getHeader());
      }
      if (other.hasBody()) {
        mergeBody(other.getBody());
      }
      if (other.hasFooter()) {
        mergeFooter(other.getFooter());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.github.iotexproject.grpc.types.Block parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.github.iotexproject.grpc.types.Block) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.github.iotexproject.grpc.types.BlockHeader header_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.iotexproject.grpc.types.BlockHeader, com.github.iotexproject.grpc.types.BlockHeader.Builder, com.github.iotexproject.grpc.types.BlockHeaderOrBuilder> headerBuilder_;
    /**
     * <code>.iotextypes.BlockHeader header = 1;</code>
     * @return Whether the header field is set.
     */
    public boolean hasHeader() {
      return headerBuilder_ != null || header_ != null;
    }
    /**
     * <code>.iotextypes.BlockHeader header = 1;</code>
     * @return The header.
     */
    public com.github.iotexproject.grpc.types.BlockHeader getHeader() {
      if (headerBuilder_ == null) {
        return header_ == null ? com.github.iotexproject.grpc.types.BlockHeader.getDefaultInstance() : header_;
      } else {
        return headerBuilder_.getMessage();
      }
    }
    /**
     * <code>.iotextypes.BlockHeader header = 1;</code>
     */
    public Builder setHeader(com.github.iotexproject.grpc.types.BlockHeader value) {
      if (headerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        header_ = value;
        onChanged();
      } else {
        headerBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.iotextypes.BlockHeader header = 1;</code>
     */
    public Builder setHeader(
        com.github.iotexproject.grpc.types.BlockHeader.Builder builderForValue) {
      if (headerBuilder_ == null) {
        header_ = builderForValue.build();
        onChanged();
      } else {
        headerBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.iotextypes.BlockHeader header = 1;</code>
     */
    public Builder mergeHeader(com.github.iotexproject.grpc.types.BlockHeader value) {
      if (headerBuilder_ == null) {
        if (header_ != null) {
          header_ =
            com.github.iotexproject.grpc.types.BlockHeader.newBuilder(header_).mergeFrom(value).buildPartial();
        } else {
          header_ = value;
        }
        onChanged();
      } else {
        headerBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.iotextypes.BlockHeader header = 1;</code>
     */
    public Builder clearHeader() {
      if (headerBuilder_ == null) {
        header_ = null;
        onChanged();
      } else {
        header_ = null;
        headerBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.iotextypes.BlockHeader header = 1;</code>
     */
    public com.github.iotexproject.grpc.types.BlockHeader.Builder getHeaderBuilder() {
      
      onChanged();
      return getHeaderFieldBuilder().getBuilder();
    }
    /**
     * <code>.iotextypes.BlockHeader header = 1;</code>
     */
    public com.github.iotexproject.grpc.types.BlockHeaderOrBuilder getHeaderOrBuilder() {
      if (headerBuilder_ != null) {
        return headerBuilder_.getMessageOrBuilder();
      } else {
        return header_ == null ?
            com.github.iotexproject.grpc.types.BlockHeader.getDefaultInstance() : header_;
      }
    }
    /**
     * <code>.iotextypes.BlockHeader header = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.iotexproject.grpc.types.BlockHeader, com.github.iotexproject.grpc.types.BlockHeader.Builder, com.github.iotexproject.grpc.types.BlockHeaderOrBuilder> 
        getHeaderFieldBuilder() {
      if (headerBuilder_ == null) {
        headerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.github.iotexproject.grpc.types.BlockHeader, com.github.iotexproject.grpc.types.BlockHeader.Builder, com.github.iotexproject.grpc.types.BlockHeaderOrBuilder>(
                getHeader(),
                getParentForChildren(),
                isClean());
        header_ = null;
      }
      return headerBuilder_;
    }

    private com.github.iotexproject.grpc.types.BlockBody body_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.iotexproject.grpc.types.BlockBody, com.github.iotexproject.grpc.types.BlockBody.Builder, com.github.iotexproject.grpc.types.BlockBodyOrBuilder> bodyBuilder_;
    /**
     * <code>.iotextypes.BlockBody body = 2;</code>
     * @return Whether the body field is set.
     */
    public boolean hasBody() {
      return bodyBuilder_ != null || body_ != null;
    }
    /**
     * <code>.iotextypes.BlockBody body = 2;</code>
     * @return The body.
     */
    public com.github.iotexproject.grpc.types.BlockBody getBody() {
      if (bodyBuilder_ == null) {
        return body_ == null ? com.github.iotexproject.grpc.types.BlockBody.getDefaultInstance() : body_;
      } else {
        return bodyBuilder_.getMessage();
      }
    }
    /**
     * <code>.iotextypes.BlockBody body = 2;</code>
     */
    public Builder setBody(com.github.iotexproject.grpc.types.BlockBody value) {
      if (bodyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        body_ = value;
        onChanged();
      } else {
        bodyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.iotextypes.BlockBody body = 2;</code>
     */
    public Builder setBody(
        com.github.iotexproject.grpc.types.BlockBody.Builder builderForValue) {
      if (bodyBuilder_ == null) {
        body_ = builderForValue.build();
        onChanged();
      } else {
        bodyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.iotextypes.BlockBody body = 2;</code>
     */
    public Builder mergeBody(com.github.iotexproject.grpc.types.BlockBody value) {
      if (bodyBuilder_ == null) {
        if (body_ != null) {
          body_ =
            com.github.iotexproject.grpc.types.BlockBody.newBuilder(body_).mergeFrom(value).buildPartial();
        } else {
          body_ = value;
        }
        onChanged();
      } else {
        bodyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.iotextypes.BlockBody body = 2;</code>
     */
    public Builder clearBody() {
      if (bodyBuilder_ == null) {
        body_ = null;
        onChanged();
      } else {
        body_ = null;
        bodyBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.iotextypes.BlockBody body = 2;</code>
     */
    public com.github.iotexproject.grpc.types.BlockBody.Builder getBodyBuilder() {
      
      onChanged();
      return getBodyFieldBuilder().getBuilder();
    }
    /**
     * <code>.iotextypes.BlockBody body = 2;</code>
     */
    public com.github.iotexproject.grpc.types.BlockBodyOrBuilder getBodyOrBuilder() {
      if (bodyBuilder_ != null) {
        return bodyBuilder_.getMessageOrBuilder();
      } else {
        return body_ == null ?
            com.github.iotexproject.grpc.types.BlockBody.getDefaultInstance() : body_;
      }
    }
    /**
     * <code>.iotextypes.BlockBody body = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.iotexproject.grpc.types.BlockBody, com.github.iotexproject.grpc.types.BlockBody.Builder, com.github.iotexproject.grpc.types.BlockBodyOrBuilder> 
        getBodyFieldBuilder() {
      if (bodyBuilder_ == null) {
        bodyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.github.iotexproject.grpc.types.BlockBody, com.github.iotexproject.grpc.types.BlockBody.Builder, com.github.iotexproject.grpc.types.BlockBodyOrBuilder>(
                getBody(),
                getParentForChildren(),
                isClean());
        body_ = null;
      }
      return bodyBuilder_;
    }

    private com.github.iotexproject.grpc.types.BlockFooter footer_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.iotexproject.grpc.types.BlockFooter, com.github.iotexproject.grpc.types.BlockFooter.Builder, com.github.iotexproject.grpc.types.BlockFooterOrBuilder> footerBuilder_;
    /**
     * <code>.iotextypes.BlockFooter footer = 3;</code>
     * @return Whether the footer field is set.
     */
    public boolean hasFooter() {
      return footerBuilder_ != null || footer_ != null;
    }
    /**
     * <code>.iotextypes.BlockFooter footer = 3;</code>
     * @return The footer.
     */
    public com.github.iotexproject.grpc.types.BlockFooter getFooter() {
      if (footerBuilder_ == null) {
        return footer_ == null ? com.github.iotexproject.grpc.types.BlockFooter.getDefaultInstance() : footer_;
      } else {
        return footerBuilder_.getMessage();
      }
    }
    /**
     * <code>.iotextypes.BlockFooter footer = 3;</code>
     */
    public Builder setFooter(com.github.iotexproject.grpc.types.BlockFooter value) {
      if (footerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        footer_ = value;
        onChanged();
      } else {
        footerBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.iotextypes.BlockFooter footer = 3;</code>
     */
    public Builder setFooter(
        com.github.iotexproject.grpc.types.BlockFooter.Builder builderForValue) {
      if (footerBuilder_ == null) {
        footer_ = builderForValue.build();
        onChanged();
      } else {
        footerBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.iotextypes.BlockFooter footer = 3;</code>
     */
    public Builder mergeFooter(com.github.iotexproject.grpc.types.BlockFooter value) {
      if (footerBuilder_ == null) {
        if (footer_ != null) {
          footer_ =
            com.github.iotexproject.grpc.types.BlockFooter.newBuilder(footer_).mergeFrom(value).buildPartial();
        } else {
          footer_ = value;
        }
        onChanged();
      } else {
        footerBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.iotextypes.BlockFooter footer = 3;</code>
     */
    public Builder clearFooter() {
      if (footerBuilder_ == null) {
        footer_ = null;
        onChanged();
      } else {
        footer_ = null;
        footerBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.iotextypes.BlockFooter footer = 3;</code>
     */
    public com.github.iotexproject.grpc.types.BlockFooter.Builder getFooterBuilder() {
      
      onChanged();
      return getFooterFieldBuilder().getBuilder();
    }
    /**
     * <code>.iotextypes.BlockFooter footer = 3;</code>
     */
    public com.github.iotexproject.grpc.types.BlockFooterOrBuilder getFooterOrBuilder() {
      if (footerBuilder_ != null) {
        return footerBuilder_.getMessageOrBuilder();
      } else {
        return footer_ == null ?
            com.github.iotexproject.grpc.types.BlockFooter.getDefaultInstance() : footer_;
      }
    }
    /**
     * <code>.iotextypes.BlockFooter footer = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.iotexproject.grpc.types.BlockFooter, com.github.iotexproject.grpc.types.BlockFooter.Builder, com.github.iotexproject.grpc.types.BlockFooterOrBuilder> 
        getFooterFieldBuilder() {
      if (footerBuilder_ == null) {
        footerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.github.iotexproject.grpc.types.BlockFooter, com.github.iotexproject.grpc.types.BlockFooter.Builder, com.github.iotexproject.grpc.types.BlockFooterOrBuilder>(
                getFooter(),
                getParentForChildren(),
                isClean());
        footer_ = null;
      }
      return footerBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:iotextypes.Block)
  }

  // @@protoc_insertion_point(class_scope:iotextypes.Block)
  private static final com.github.iotexproject.grpc.types.Block DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.iotexproject.grpc.types.Block();
  }

  public static com.github.iotexproject.grpc.types.Block getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Block>
      PARSER = new com.google.protobuf.AbstractParser<Block>() {
    @java.lang.Override
    public Block parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Block(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Block> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Block> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.github.iotexproject.grpc.types.Block getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

