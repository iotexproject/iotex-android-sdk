// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/types/action.proto
// Protobuf Java Version: 4.29.1

package com.github.iotexproject.grpc.types;

/**
 * Protobuf enum {@code iotextypes.Encoding}
 */
public enum Encoding
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>IOTEX_PROTOBUF = 0;</code>
   */
  IOTEX_PROTOBUF(0, 0),
  /**
   * <code>ETHEREUM_EIP155 = 1;</code>
   */
  ETHEREUM_EIP155(1, 1),
  /**
   * <code>ETHEREUM_UNPROTECTED = 2;</code>
   */
  ETHEREUM_UNPROTECTED(3, 2),
  /**
   * <code>TX_CONTAINER = 128;</code>
   */
  TX_CONTAINER(4, 128),
  UNRECOGNIZED(-1, -1),
  ;

  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 1,
      /* suffix= */ "",
      Encoding.class.getName());
  }
  /**
   * <code>ETHEREUM_RLP = 1;</code>
   */
  public static final Encoding ETHEREUM_RLP = ETHEREUM_EIP155;
  /**
   * <code>IOTEX_PROTOBUF = 0;</code>
   */
  public static final int IOTEX_PROTOBUF_VALUE = 0;
  /**
   * <code>ETHEREUM_EIP155 = 1;</code>
   */
  public static final int ETHEREUM_EIP155_VALUE = 1;
  /**
   * <code>ETHEREUM_RLP = 1;</code>
   */
  public static final int ETHEREUM_RLP_VALUE = 1;
  /**
   * <code>ETHEREUM_UNPROTECTED = 2;</code>
   */
  public static final int ETHEREUM_UNPROTECTED_VALUE = 2;
  /**
   * <code>TX_CONTAINER = 128;</code>
   */
  public static final int TX_CONTAINER_VALUE = 128;


  public final int getNumber() {
    if (index == -1) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Encoding valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Encoding forNumber(int value) {
    switch (value) {
      case 0: return IOTEX_PROTOBUF;
      case 1: return ETHEREUM_EIP155;
      case 2: return ETHEREUM_UNPROTECTED;
      case 128: return TX_CONTAINER;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Encoding>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Encoding> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Encoding>() {
          public Encoding findValueByNumber(int number) {
            return Encoding.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (index == -1) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(index);
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.github.iotexproject.grpc.types.ActionOuterClass.getDescriptor().getEnumTypes().get(0);
  }

  private static final Encoding[] VALUES = getStaticValuesArray();
  private static Encoding[] getStaticValuesArray() {
    return new Encoding[] {
    IOTEX_PROTOBUF, ETHEREUM_EIP155, ETHEREUM_RLP, ETHEREUM_UNPROTECTED, TX_CONTAINER, 
    };
  }
  public static Encoding valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int index;
  private final int value;

  private Encoding(int index, int value) {
    this.index = index;
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:iotextypes.Encoding)
}

