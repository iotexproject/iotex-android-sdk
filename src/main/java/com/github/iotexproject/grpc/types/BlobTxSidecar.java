// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/types/action.proto
// Protobuf Java Version: 4.29.1

package com.github.iotexproject.grpc.types;

/**
 * Protobuf type {@code iotextypes.BlobTxSidecar}
 */
public final class BlobTxSidecar extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:iotextypes.BlobTxSidecar)
    BlobTxSidecarOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 1,
      /* suffix= */ "",
      BlobTxSidecar.class.getName());
  }
  // Use BlobTxSidecar.newBuilder() to construct.
  private BlobTxSidecar(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private BlobTxSidecar() {
    blobs_ = emptyList(com.google.protobuf.ByteString.class);
    commitments_ = emptyList(com.google.protobuf.ByteString.class);
    proofs_ = emptyList(com.google.protobuf.ByteString.class);
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.iotexproject.grpc.types.ActionOuterClass.internal_static_iotextypes_BlobTxSidecar_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.iotexproject.grpc.types.ActionOuterClass.internal_static_iotextypes_BlobTxSidecar_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.iotexproject.grpc.types.BlobTxSidecar.class, com.github.iotexproject.grpc.types.BlobTxSidecar.Builder.class);
  }

  public static final int BLOBS_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> blobs_ =
      emptyList(com.google.protobuf.ByteString.class);
  /**
   * <pre>
   * Blobs needed by the blob pool
   * </pre>
   *
   * <code>repeated bytes blobs = 1;</code>
   * @return A list containing the blobs.
   */
  @java.lang.Override
  public java.util.List<com.google.protobuf.ByteString>
      getBlobsList() {
    return blobs_;
  }
  /**
   * <pre>
   * Blobs needed by the blob pool
   * </pre>
   *
   * <code>repeated bytes blobs = 1;</code>
   * @return The count of blobs.
   */
  public int getBlobsCount() {
    return blobs_.size();
  }
  /**
   * <pre>
   * Blobs needed by the blob pool
   * </pre>
   *
   * <code>repeated bytes blobs = 1;</code>
   * @param index The index of the element to return.
   * @return The blobs at the given index.
   */
  public com.google.protobuf.ByteString getBlobs(int index) {
    return blobs_.get(index);
  }

  public static final int COMMITMENTS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> commitments_ =
      emptyList(com.google.protobuf.ByteString.class);
  /**
   * <pre>
   * Commitments needed by the blob pool
   * </pre>
   *
   * <code>repeated bytes commitments = 2;</code>
   * @return A list containing the commitments.
   */
  @java.lang.Override
  public java.util.List<com.google.protobuf.ByteString>
      getCommitmentsList() {
    return commitments_;
  }
  /**
   * <pre>
   * Commitments needed by the blob pool
   * </pre>
   *
   * <code>repeated bytes commitments = 2;</code>
   * @return The count of commitments.
   */
  public int getCommitmentsCount() {
    return commitments_.size();
  }
  /**
   * <pre>
   * Commitments needed by the blob pool
   * </pre>
   *
   * <code>repeated bytes commitments = 2;</code>
   * @param index The index of the element to return.
   * @return The commitments at the given index.
   */
  public com.google.protobuf.ByteString getCommitments(int index) {
    return commitments_.get(index);
  }

  public static final int PROOFS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> proofs_ =
      emptyList(com.google.protobuf.ByteString.class);
  /**
   * <pre>
   * Proofs needed by the blob pool
   * </pre>
   *
   * <code>repeated bytes proofs = 3;</code>
   * @return A list containing the proofs.
   */
  @java.lang.Override
  public java.util.List<com.google.protobuf.ByteString>
      getProofsList() {
    return proofs_;
  }
  /**
   * <pre>
   * Proofs needed by the blob pool
   * </pre>
   *
   * <code>repeated bytes proofs = 3;</code>
   * @return The count of proofs.
   */
  public int getProofsCount() {
    return proofs_.size();
  }
  /**
   * <pre>
   * Proofs needed by the blob pool
   * </pre>
   *
   * <code>repeated bytes proofs = 3;</code>
   * @param index The index of the element to return.
   * @return The proofs at the given index.
   */
  public com.google.protobuf.ByteString getProofs(int index) {
    return proofs_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < blobs_.size(); i++) {
      output.writeBytes(1, blobs_.get(i));
    }
    for (int i = 0; i < commitments_.size(); i++) {
      output.writeBytes(2, commitments_.get(i));
    }
    for (int i = 0; i < proofs_.size(); i++) {
      output.writeBytes(3, proofs_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < blobs_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeBytesSizeNoTag(blobs_.get(i));
      }
      size += dataSize;
      size += 1 * getBlobsList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < commitments_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeBytesSizeNoTag(commitments_.get(i));
      }
      size += dataSize;
      size += 1 * getCommitmentsList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < proofs_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeBytesSizeNoTag(proofs_.get(i));
      }
      size += dataSize;
      size += 1 * getProofsList().size();
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.github.iotexproject.grpc.types.BlobTxSidecar)) {
      return super.equals(obj);
    }
    com.github.iotexproject.grpc.types.BlobTxSidecar other = (com.github.iotexproject.grpc.types.BlobTxSidecar) obj;

    if (!getBlobsList()
        .equals(other.getBlobsList())) return false;
    if (!getCommitmentsList()
        .equals(other.getCommitmentsList())) return false;
    if (!getProofsList()
        .equals(other.getProofsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getBlobsCount() > 0) {
      hash = (37 * hash) + BLOBS_FIELD_NUMBER;
      hash = (53 * hash) + getBlobsList().hashCode();
    }
    if (getCommitmentsCount() > 0) {
      hash = (37 * hash) + COMMITMENTS_FIELD_NUMBER;
      hash = (53 * hash) + getCommitmentsList().hashCode();
    }
    if (getProofsCount() > 0) {
      hash = (37 * hash) + PROOFS_FIELD_NUMBER;
      hash = (53 * hash) + getProofsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.github.iotexproject.grpc.types.BlobTxSidecar parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.iotexproject.grpc.types.BlobTxSidecar parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.iotexproject.grpc.types.BlobTxSidecar parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.iotexproject.grpc.types.BlobTxSidecar parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.iotexproject.grpc.types.BlobTxSidecar parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.iotexproject.grpc.types.BlobTxSidecar parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.iotexproject.grpc.types.BlobTxSidecar parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.github.iotexproject.grpc.types.BlobTxSidecar parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.github.iotexproject.grpc.types.BlobTxSidecar parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.github.iotexproject.grpc.types.BlobTxSidecar parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.iotexproject.grpc.types.BlobTxSidecar parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.github.iotexproject.grpc.types.BlobTxSidecar parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.iotexproject.grpc.types.BlobTxSidecar prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code iotextypes.BlobTxSidecar}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:iotextypes.BlobTxSidecar)
      com.github.iotexproject.grpc.types.BlobTxSidecarOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.iotexproject.grpc.types.ActionOuterClass.internal_static_iotextypes_BlobTxSidecar_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.iotexproject.grpc.types.ActionOuterClass.internal_static_iotextypes_BlobTxSidecar_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.iotexproject.grpc.types.BlobTxSidecar.class, com.github.iotexproject.grpc.types.BlobTxSidecar.Builder.class);
    }

    // Construct using com.github.iotexproject.grpc.types.BlobTxSidecar.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      blobs_ = emptyList(com.google.protobuf.ByteString.class);
      commitments_ = emptyList(com.google.protobuf.ByteString.class);
      proofs_ = emptyList(com.google.protobuf.ByteString.class);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.iotexproject.grpc.types.ActionOuterClass.internal_static_iotextypes_BlobTxSidecar_descriptor;
    }

    @java.lang.Override
    public com.github.iotexproject.grpc.types.BlobTxSidecar getDefaultInstanceForType() {
      return com.github.iotexproject.grpc.types.BlobTxSidecar.getDefaultInstance();
    }

    @java.lang.Override
    public com.github.iotexproject.grpc.types.BlobTxSidecar build() {
      com.github.iotexproject.grpc.types.BlobTxSidecar result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.github.iotexproject.grpc.types.BlobTxSidecar buildPartial() {
      com.github.iotexproject.grpc.types.BlobTxSidecar result = new com.github.iotexproject.grpc.types.BlobTxSidecar(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.github.iotexproject.grpc.types.BlobTxSidecar result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        blobs_.makeImmutable();
        result.blobs_ = blobs_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        commitments_.makeImmutable();
        result.commitments_ = commitments_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        proofs_.makeImmutable();
        result.proofs_ = proofs_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.iotexproject.grpc.types.BlobTxSidecar) {
        return mergeFrom((com.github.iotexproject.grpc.types.BlobTxSidecar)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.iotexproject.grpc.types.BlobTxSidecar other) {
      if (other == com.github.iotexproject.grpc.types.BlobTxSidecar.getDefaultInstance()) return this;
      if (!other.blobs_.isEmpty()) {
        if (blobs_.isEmpty()) {
          blobs_ = other.blobs_;
          blobs_.makeImmutable();
          bitField0_ |= 0x00000001;
        } else {
          ensureBlobsIsMutable();
          blobs_.addAll(other.blobs_);
        }
        onChanged();
      }
      if (!other.commitments_.isEmpty()) {
        if (commitments_.isEmpty()) {
          commitments_ = other.commitments_;
          commitments_.makeImmutable();
          bitField0_ |= 0x00000002;
        } else {
          ensureCommitmentsIsMutable();
          commitments_.addAll(other.commitments_);
        }
        onChanged();
      }
      if (!other.proofs_.isEmpty()) {
        if (proofs_.isEmpty()) {
          proofs_ = other.proofs_;
          proofs_.makeImmutable();
          bitField0_ |= 0x00000004;
        } else {
          ensureProofsIsMutable();
          proofs_.addAll(other.proofs_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.ByteString v = input.readBytes();
              ensureBlobsIsMutable();
              blobs_.add(v);
              break;
            } // case 10
            case 18: {
              com.google.protobuf.ByteString v = input.readBytes();
              ensureCommitmentsIsMutable();
              commitments_.add(v);
              break;
            } // case 18
            case 26: {
              com.google.protobuf.ByteString v = input.readBytes();
              ensureProofsIsMutable();
              proofs_.add(v);
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> blobs_ = emptyList(com.google.protobuf.ByteString.class);
    private void ensureBlobsIsMutable() {
      if (!blobs_.isModifiable()) {
        blobs_ = makeMutableCopy(blobs_);
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * Blobs needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes blobs = 1;</code>
     * @return A list containing the blobs.
     */
    public java.util.List<com.google.protobuf.ByteString>
        getBlobsList() {
      blobs_.makeImmutable();
      return blobs_;
    }
    /**
     * <pre>
     * Blobs needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes blobs = 1;</code>
     * @return The count of blobs.
     */
    public int getBlobsCount() {
      return blobs_.size();
    }
    /**
     * <pre>
     * Blobs needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes blobs = 1;</code>
     * @param index The index of the element to return.
     * @return The blobs at the given index.
     */
    public com.google.protobuf.ByteString getBlobs(int index) {
      return blobs_.get(index);
    }
    /**
     * <pre>
     * Blobs needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes blobs = 1;</code>
     * @param index The index to set the value at.
     * @param value The blobs to set.
     * @return This builder for chaining.
     */
    public Builder setBlobs(
        int index, com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      ensureBlobsIsMutable();
      blobs_.set(index, value);
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Blobs needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes blobs = 1;</code>
     * @param value The blobs to add.
     * @return This builder for chaining.
     */
    public Builder addBlobs(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      ensureBlobsIsMutable();
      blobs_.add(value);
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Blobs needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes blobs = 1;</code>
     * @param values The blobs to add.
     * @return This builder for chaining.
     */
    public Builder addAllBlobs(
        java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
      ensureBlobsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, blobs_);
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Blobs needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes blobs = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearBlobs() {
      blobs_ = emptyList(com.google.protobuf.ByteString.class);
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> commitments_ = emptyList(com.google.protobuf.ByteString.class);
    private void ensureCommitmentsIsMutable() {
      if (!commitments_.isModifiable()) {
        commitments_ = makeMutableCopy(commitments_);
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * Commitments needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes commitments = 2;</code>
     * @return A list containing the commitments.
     */
    public java.util.List<com.google.protobuf.ByteString>
        getCommitmentsList() {
      commitments_.makeImmutable();
      return commitments_;
    }
    /**
     * <pre>
     * Commitments needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes commitments = 2;</code>
     * @return The count of commitments.
     */
    public int getCommitmentsCount() {
      return commitments_.size();
    }
    /**
     * <pre>
     * Commitments needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes commitments = 2;</code>
     * @param index The index of the element to return.
     * @return The commitments at the given index.
     */
    public com.google.protobuf.ByteString getCommitments(int index) {
      return commitments_.get(index);
    }
    /**
     * <pre>
     * Commitments needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes commitments = 2;</code>
     * @param index The index to set the value at.
     * @param value The commitments to set.
     * @return This builder for chaining.
     */
    public Builder setCommitments(
        int index, com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      ensureCommitmentsIsMutable();
      commitments_.set(index, value);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Commitments needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes commitments = 2;</code>
     * @param value The commitments to add.
     * @return This builder for chaining.
     */
    public Builder addCommitments(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      ensureCommitmentsIsMutable();
      commitments_.add(value);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Commitments needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes commitments = 2;</code>
     * @param values The commitments to add.
     * @return This builder for chaining.
     */
    public Builder addAllCommitments(
        java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
      ensureCommitmentsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, commitments_);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Commitments needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes commitments = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearCommitments() {
      commitments_ = emptyList(com.google.protobuf.ByteString.class);
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> proofs_ = emptyList(com.google.protobuf.ByteString.class);
    private void ensureProofsIsMutable() {
      if (!proofs_.isModifiable()) {
        proofs_ = makeMutableCopy(proofs_);
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <pre>
     * Proofs needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes proofs = 3;</code>
     * @return A list containing the proofs.
     */
    public java.util.List<com.google.protobuf.ByteString>
        getProofsList() {
      proofs_.makeImmutable();
      return proofs_;
    }
    /**
     * <pre>
     * Proofs needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes proofs = 3;</code>
     * @return The count of proofs.
     */
    public int getProofsCount() {
      return proofs_.size();
    }
    /**
     * <pre>
     * Proofs needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes proofs = 3;</code>
     * @param index The index of the element to return.
     * @return The proofs at the given index.
     */
    public com.google.protobuf.ByteString getProofs(int index) {
      return proofs_.get(index);
    }
    /**
     * <pre>
     * Proofs needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes proofs = 3;</code>
     * @param index The index to set the value at.
     * @param value The proofs to set.
     * @return This builder for chaining.
     */
    public Builder setProofs(
        int index, com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      ensureProofsIsMutable();
      proofs_.set(index, value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Proofs needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes proofs = 3;</code>
     * @param value The proofs to add.
     * @return This builder for chaining.
     */
    public Builder addProofs(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      ensureProofsIsMutable();
      proofs_.add(value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Proofs needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes proofs = 3;</code>
     * @param values The proofs to add.
     * @return This builder for chaining.
     */
    public Builder addAllProofs(
        java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
      ensureProofsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, proofs_);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Proofs needed by the blob pool
     * </pre>
     *
     * <code>repeated bytes proofs = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearProofs() {
      proofs_ = emptyList(com.google.protobuf.ByteString.class);
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:iotextypes.BlobTxSidecar)
  }

  // @@protoc_insertion_point(class_scope:iotextypes.BlobTxSidecar)
  private static final com.github.iotexproject.grpc.types.BlobTxSidecar DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.iotexproject.grpc.types.BlobTxSidecar();
  }

  public static com.github.iotexproject.grpc.types.BlobTxSidecar getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<BlobTxSidecar>
      PARSER = new com.google.protobuf.AbstractParser<BlobTxSidecar>() {
    @java.lang.Override
    public BlobTxSidecar parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<BlobTxSidecar> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<BlobTxSidecar> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.github.iotexproject.grpc.types.BlobTxSidecar getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

